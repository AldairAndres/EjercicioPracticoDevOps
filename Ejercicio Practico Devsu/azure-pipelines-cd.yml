trigger: none                          # CD no se dispara solo por cambios de código

resources:
  pipelines:                           # Consume artefactos del pipeline CI
    - pipeline: ci
      source: 'azure-pipelines-ci'     # Nombre del pipeline CI en Azure DevOps
      branch: main
      trigger:                         # Auto-disparo cuando CI termina OK
        branches:
          include:
            - main

variables:
  AKS_RG: 'rg-aks'                # Resource Group del cluster
  AKS_NAME: 'aks-prueba-java'          # Nombre del AKS
  AKS_NAMESPACE: 'namespaceprueba-java'    # Namespace de despliegue
  ACR_NAME: ''                    # Debe coincidir con CI
  IMAGE_NAME: 'prueba-devops-java'
  IMAGE_TAG: '$(resources.pipeline.ci.runID)'  # Usa el runID del CI como tag
  MANIFESTS_PATH: '$(Pipeline.Workspace)/ci/$(ARTIFACT_MANIFESTS)'  # Ruta al artefacto descargado
  ARTIFACT_MANIFESTS: 'manifests-cloud'

stages:
- stage: Deploy
  displayName: 'Despliegue a AKS'
  jobs:
    - deployment: deploy_k8s
      displayName: 'kubectl apply'
      environment: 'aks-prod'          # Entorno en Azure DevOps (puede requerir aprobación)
      strategy:
        runOnce:
          deploy:
            steps:
              - download: ci
                artifact: '$(ARTIFACT_MANIFESTS)'

              - task: AzureCLI@2
                displayName: 'Login AKS (obtener credenciales kubectl)'
                inputs:
                  azureSubscription: 'SC-AZ-DEVOPS'
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    az aks get-credentials --resource-group $(AKS_RG) --name $(AKS_NAME) --overwrite-existing

              - script: |
                  echo "Sustituyendo tag de imagen en los YAML..."
                  find $(MANIFESTS_PATH) -type f -name "*.yaml" -print0 | xargs -0 sed -i "s#__IMAGE_TAG__#$(IMAGE_TAG)#g"
                displayName: 'Inyectar tag de imagen'

              - task: KubernetesManifest@1
                displayName: 'Aplicar manifiestos'
                inputs:
                  action: 'deploy'
                  kubernetesServiceConnection: 'SC-AKS-Kube'  # Service connection tipo KubeConfig o Azure Resource Manager
                  namespace: '$(AKS_NAMESPACE)'
                  manifests: |
                    $(MANIFESTS_PATH)/00-namespace.yaml
                    $(MANIFESTS_PATH)/01-service-account.yaml
                    $(MANIFESTS_PATH)/02-config-map.yaml
                    $(MANIFESTS_PATH)/03-deployment.yaml
                    $(MANIFESTS_PATH)/04-service.yaml
                    $(MANIFESTS_PATH)/05-ingress.yaml
                    $(MANIFESTS_PATH)/06-hpa.yaml
                    $(MANIFESTS_PATH)/07-pdb.yaml
                    $(MANIFESTS_PATH)/08-networkpolicy.yaml

              - script: |
                  echo "Esperando a que los Pods estén listos..."
                  kubectl rollout status deployment/prueba-java-app -n $(AKS_NAMESPACE) --timeout=120s
                displayName: 'Rollout status'

              - script: |
                  echo "Smoke test /healthz"
                  curl -f https://app.demo.tu-dominio.com/healthz || exit 1
                displayName: 'Smoke test'

# ----------------------------------------------------------------------
# Buenas prácticas CD
# - Environments con aprobación manual para producción.
# - Service Connection separado para K8s (principio de mínimo privilegio).
# - Sustitución de variables en manifiestos antes de aplicar (tag imagen).
# - Rollout status + smoke test rápidos valida despliegue básico.
# - Para rollback: kubectl rollout undo o mantener versiones helm.
