apiVersion: v1                     # Versión de la API para recursos core (Service pertenece al Core API)
kind: Service                      # Tipo de recurso: Service, expone Pods en la red del clúster
metadata:
  name: prueba-java-svc            # Nombre único del Service en el namespace
  namespace: namespace-prueba-java
spec:
  type: ClusterIP                  # Tipo de Service: ClusterIP crea una IP accesible solo dentro del clúster
  selector:
    app: prueba-java               # Etiqueta que identifica los Pods destino del tráfico
  ports:
    - name: http                   # Nombre lógico del puerto (útil para referenciar en Ingress)
      port: 80                     # Puerto virtual del Service al que conectan los clientes internos
      targetPort: 8080             # Puerto del contenedor al que se enruta el tráfico
      protocol: TCP                # Protocolo de la comunicación (por defecto TCP)

# ----------------------------------------------------------------------
# Buenas prácticas al definir un Service:
#
# 1. Se elige el tipo de Service adecuado:
#    • ClusterIP para tráfico interno (microservicios, probes, HPA).
#    • NodePort para pruebas locales o debugging.
#    • LoadBalancer en entornos cloud para exponer externamente.
#
# 2. Mantener coherencia de etiquetas:
#    • La misma etiqueta (app: prueba-java) en Deployment y Service garantiza el enrutamiento correcto.
#
# 3. Se nombra claramente los puertos:
#    • El campo `name` permite referenciar puertos por nombre (p.ej. en Ingress y probes).
#
# 4. Se alinea `port` y `targetPort`:
#    • `port` es el puerto expuesto por el Service.
#    • `targetPort` debe coincidir con el `containerPort` en el Pod.
#
# 5. Protocolos alternativos:
#    • En caso de usar UDP o SCTP, especificar claramente `protocol: UDP` o `SCTP`.
#
# 6. Minimizar exposición externa:
#    • En producción, preferir ClusterIP + Ingress o LoadBalancer en lugar de NodePort.
#
# 7. Anotaciones de plataforma:
#    • Añadir `metadata.annotations` para integración con Service Mesh, ExternalDNS, certificados TLS, etc.
#

