# file: 03-deployment.yaml
apiVersion: apps/v1                 # API para objetos de tipo Deployment.
kind: Deployment                    # Controlador que define Pods declarativos y rolling updates.
metadata:
  name: prueba-java-app             # Nombre del Deployment.
  namespace: namespace-prueba-java       # Namespace donde se despliega.
  labels:
    app: prueba-java                # Etiqueta principal de la app, usada por selectors y HPA.
spec:
  replicas: 2                       # Cantidad inicial de réplicas; HPA podrá escalar.
  strategy:                         # Estrategia de actualización rolling update (sin downtime).
    type: RollingUpdate             # Tipo de estrategia.
    rollingUpdate:
      maxSurge: 1                   # Se permite crear 1 Pod adicional durante el despliegue.
      maxUnavailable: 0             # Ningún Pod viejo puede caer mientras entran los nuevos.
  selector:
    matchLabels:
      app: prueba-java              # Selector que debe coincidir con labels de template.
  template:                         # Plantilla de los Pods gestionados por el Deployment.
    metadata:
      labels:
        app: prueba-java            # Debe coincidir EXACTAMENTE con spec.selector.matchLabels.
    spec:
      serviceAccountName: prueba-java-sa   # El SA creado en 01-service-account.yaml.
      containers:
        - name: app                 # Nombre del contenedor dentro del Pod.
          image: myacr.azurecr.io/prueba-devops-java:__IMAGE_TAG__
                                    # Imagen publicada por tu pipeline CI en ACR (reemplazar __IMAGE_TAG__).
          imagePullPolicy: IfNotPresent   # AKS intentará no bajar la imagen si ya la tiene en el nodo.
          ports:
            - containerPort: 8080   # Puerto que expone el contenedor.
              name: http            # Nombre lógico para usar en Service/Ingress.
          envFrom:
            - configMapRef:
                name: prueba-java-config   # Variables leídas desde el ConfigMap.
          readinessProbe:           # Determina cuándo el Pod está listo para recibir tráfico.
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 5  # Tiempo para arrancar la app antes de chequear.
            periodSeconds: 10       # Frecuencia de chequeo.
            timeoutSeconds: 2       # Tiempo antes de que el probe venza por timeout.
            failureThreshold: 3     # Retries antes de marcar NotReady.
          livenessProbe:            # Determina si el contenedor está vivo; si falla, se reinicia.
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 2
            failureThreshold: 3
          resources:                # Solicitudes y límites para scheduler y HPA.
            requests:
              cpu: "200m"           # CPU garantizada (HPA usa esto como base para %).
              memory: "256Mi"
            limits:
              cpu: "500m"           # CPU máxima que puede consumir el contenedor.
              memory: "512Mi"

# ----------------------------------------------------------------------
# Buenas prácticas
# - strategy.rollingUpdate evita downtime y permite rollback.
# - readinessProbe y livenessProbe deben apuntar a endpoints fiables (Actuator).
# - resources.requests obligatorios para que el HPA calcule % de uso.
# - Mantener las labels coherentes para que Service/HPA/NetworkPolicy seleccionen correctamente.
# - Usar tags inmutables (sha256 o versión semántica) en la imagen, no “latest”.
